# Generated by Django 4.2.23 on 2025-08-11 07:18

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('memo', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='libraries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Libraries',
                'ordering': ['-last_modified'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(choices=[('naver', 'Naver'), ('coupang', 'Coupang')], max_length=20)),
                ('keyword', models.CharField(max_length=255)),
                ('result_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Searches',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ResultItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seller', models.CharField(max_length=255)),
                ('product', models.CharField(max_length=255)),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('discount', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('shipping', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('product_url', models.URLField(blank=True, max_length=500, null=True)),
                ('product_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.library')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.result')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='result',
            name='search',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.search'),
        ),
        migrations.CreateModel(
            name='ResultReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_id', models.CharField(help_text='Original review ID from platform', max_length=100)),
                ('username', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('rating', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('review_type', models.CharField(choices=[('top', 'Top Reviews'), ('worst', 'Worst Reviews')], max_length=10)),
                ('date', models.DateTimeField()),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.result')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('result', 'review_id')},
            },
        ),
        migrations.CreateModel(
            name='ResultDetailImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('section', models.PositiveIntegerField(blank=True, help_text='Section number for grouping images', null=True)),
                ('category', models.CharField(blank=True, choices=[('product_option', 'Product Option'), ('product_description', 'Product Description'), ('specifications', 'Specifications'), ('usage_guide', 'Usage Guide'), ('ingredients', 'Ingredients'), ('size_chart', 'Size Chart'), ('warranty', 'Warranty'), ('other', 'Other')], max_length=50, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the image')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order within section')),
                ('is_analyzed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='detail_images', to='core.resultitem')),
            ],
            options={
                'ordering': ['section', 'order', 'created_at'],
                'unique_together': {('result_item', 'url')},
            },
        ),
        migrations.CreateModel(
            name='LibraryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='User notes for this item')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.library')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_items', to='core.result')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('library', 'result')},
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='core.resultitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Histories',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'result_item')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.PositiveIntegerField()),
                ('category', models.CharField(choices=[('product_option', 'Product Option'), ('product_description', 'Product Description'), ('specifications', 'Specifications'), ('usage_guide', 'Usage Guide'), ('ingredients', 'Ingredients'), ('size_chart', 'Size Chart'), ('warranty', 'Warranty'), ('other', 'Other')], max_length=50)),
                ('result_json', models.JSONField(default=dict)),
                ('prompt_used', models.TextField(blank=True, help_text='Prompt sent to LLM')),
                ('model_used', models.CharField(blank=True, help_text='LLM model identifier', max_length=100)),
                ('processing_time', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result_item', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='analysis_results', to='core.resultitem')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('result_item', 'section', 'category')},
            },
        ),
    ]
